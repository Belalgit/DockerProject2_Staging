name: AWS ECR image push to EKS

on:
 
  push:
    branches: [ main ]

env:
  ECR_REPOSITORY: ${{ secrets.AWS_ECR_REPO_NAME }}
  EKS_CLUSTER_NAME: ${{ secrets.AWS_EKS_NAME }}
  AWS_REGION: ${{ secrets.AWS_REGION }}

jobs:
  
  build:
    
    name: Deployment ECR image to EKS
    runs-on: self-hosted

    steps:

    - name: Set short git commit SHA
      id: commit
      uses: prompt/actions-commit-hash@v2

    - name: Check out code
      uses: actions/checkout@v2
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Pull image from ECR to EKS. remove previoused images from EKS
      env:
        REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        REPOSITORY: ${{ secrets.AWS_ECR_REPO_NAME }}
        IMAGE_TAG: latest
        AWS_REGION: ${{ secrets.AWS_REGION}}
      run: |
        docker stop webapp || true
        docker system prune --force 
        docker pull $REGISTRY/$REPOSITORY:$IMAGE_TAG
    
    - name: Install kubectl
      run: |
        curl -O https://s3.us-west-2.amazonaws.com/amazon-eks/1.29.0/2024-01-04/bin/linux/amd64/kubectl


    - name: Update kubeconfig
      run: aws eks update-kubeconfig --region us-east-1 --name stagingeks

    - name: ECR image Deploy to EKS 
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}        
        IMAGE_TAG: ${{ steps.commit.outputs.short }}
      run: |
        sed -i.bak "s|DOCKER_IMAGE|$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG|g" ./deployment.yaml && \
        kubectl apply -f ./deployment.yaml
        kubectl apply -f ./service.yaml